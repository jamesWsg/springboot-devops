# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest

# just test
# steps:
# - script: echo Hello, world!
#   displayName: 'Run a one-line script'

# - script: |
#     echo Add other tasks to build, test, and deploy your project.
#     echo See https://aka.ms/yaml
#   displayName: 'Run a multi-line script'


variables:
  dockerRegistryServiceConnection: dockerHub-connection
  azure-connection: azure-aca-connection-sp
  IMAGE_REPOSITORY: shengguowu/azure-devops
  DOCKERFILE_PATH: Dockerfile
  TAG: '$(Build.BuildId)'

  CONTAINERAPPS_APP: springboot-hello
  CONTAINERAPPS_ENVIRONMENT: aca-environment
  RESOURCE_GROUP: rg-aca-azure-pipelines


  
stages:
- stage: Build
  displayName: Build and push image
  jobs:
  - job: maven build
    steps:
    - task: Maven@4
      inputs:
        mavenPomFile: 'pom.xml'
        mavenOptions: '-Xmx3072m'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '1.17'
        jdkArchitectureOption: 'x64'
        # Junit set to falseï¼Œbeacuse no test
        publishJUnitResults: false
        testResultsFiles: '**/TEST-*.xml'
        goals: 'package'
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(IMAGE_REPOSITORY)
        dockerfile: $(DOCKERFILE_PATH)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(TAG)

- stage: Deploy to azure container app
  dependsOn: Build
  jobs:
  - job: Deploy
    displayName: Deploy
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: AzureContainerApps@1
      displayName: Deploy new container version
      inputs:
        azureSubscription: 'azure-connection'
        imageToDeploy: '$(IMAGE_REPOSITORY):$(TAG)'
        containerAppName: '$(CONTAINERAPPS_APP)'
        resourceGroup: '$(RESOURCE_GROUP)'
        containerAppEnvironment: '$(CONTAINERAPPS_ENVIRONMENT)'
        targetPort: '3500'
        ingress: 'external'



